Square Root
Difficulty: EasyAccuracy: 54.03%Submissions: 345K+Points: 2Average Time: 20m
Given a positive integer n, find the square root of n. If n is not a perfect square, then return the floor value.

Floor value of any number is the greatest Integer which is less than or equal to that number.

Examples:

Input: n = 4
Output: 2
Explanation: Since, 4 is a perfect square, so its square root is 2.
Input: n = 11
Output: 3
Explanation: Since, 11 is not a perfect square, floor of square root of 11 is 3.
Input: n = 1
Output: 1
Explanation: 1 is a perfect sqaure, so its square root is 1.
Constraints:
1 ≤ n ≤ 3*104


Solution:
class Solution {
    int floorSqrt(int n) {
        if (n == 0 || n == 1) {
            return n;  // sqrt(0) = 0, sqrt(1) = 1
        }

        int ans = 1; // store the floor value
        for (int i = 1; i <= n / 2; i++) {
            if (i * i == n) {
                return i;  // exact square
            } else if (i * i < n) {
                ans = i;  // update floor candidate
            } else {
                break;  // stop once i*i exceeds n
            }
        }
        return ans;
    }
}
